% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tensor_clustering.R
\name{hALloyd}
\alias{hALloyd}
\title{Angle-based iteration}
\usage{
hALloyd(Y, z0, max_iter, alpha1 = 0.01, asymm)
}
\arguments{
\item{Y}{order-3 array or matrix, order-3 tensor or matrix observation}

\item{z0}{vector or list of vectors, initial clustering assignment; see "details"}

\item{max_iter}{integer, max number of iterations if update does not converge}

\item{alpha1}{number, substitution of degenerate core tensor; see "details"}

\item{asymm}{logic variable, if "TRUE", assume the clustering assignment differs in different modes; if "FALSE", assume all the modes share the same clustering assignment}
}
\value{
a list containing the following:

\code{z} {vector ( if \code{asymm = F} ) or a list of vectors ( if \code{asymm = T} ) recording the estimated clustering assignment}

\code{s_deg} {logic variable, if "TRUE", degenerate estimated core tensor occurs during the iteration; if "FALSE", otherwise}
}
\description{
Angle-based iteration for multiway spherical clustering under degree-corrected tensor block model.
This function takes the tensor/matrix observation, initial clustering assignment, and a logic variable indicating the symmetry
of the tensor as input. The output is the refined clustering assignment.
}
\details{
For initial clustering assignment \code{z0}, if \code{z0} is a vector, assume all the modes share the same initialization \code{z0},
if \code{z0} is a vector, \code{z0} specifies the initialization on each mode; matrix observation only accounts the first two vectors in the list.\preformatted{    When the estimated core tensor has a degenerate slice, i.e., a slice with all zero elements, randomly pick an entry in the degenerate slice with value \code{alpha1}.
}
}
\examples{
seed = 1
p = 30
r = 3
delta = 0.5
s_min = 0.05
s_max = 1
dist = "normal"
theta_dist = "pareto"
alpha = 4
beta = 3/4
sigma = 0.2

data = sim_hDCBM_network(seed = seed, p, r,  delta = delta,
 s_min = s_min, s_max = s_max, dist =  dist, sigma = sigma,
 theta_dist = theta_dist, alpha = alpha, beta = beta, imat = F)

initialization = wkmeans(test_dat$Y,r = 3, asymm = F)

iteration = hALloyd(data$Y, initialization$z,max_iter = 20,asymm = F)
}
