install.packages("caret")
library(tensorregress)
40/800
install.packages(c("gplots", "logistf", "reliaR", "RMTstat"))
#### code for Figure 3. Convergence of MSE with respect to dimension for three models under different ranks
install.packages("tensorregress.tar.gz",repos = NULL, type="source")
source("simulation.R")
library(tensorregress)
set.seed(0)
### covariates on all three modes
dup=30
d_pre=c(30)
p_pre=round(0.4*d_pre)
c_pre=c(2)
d_range=cbind(d_pre,d_pre,d_pre)
p_range=cbind(p_pre,p_pre,p_pre)
c_range=cbind(c_pre,c_pre,c_pre)
Figure3_normal=conv_rate(seed=NA,signal=10,cons="non",c_range=c_range,dist="normal",alpha=10,dup=dup,d_range=d_range,p_range=p_range,naive=FALSE)
#save(Figure3_normal,file="presaved/Figure3_normal.RData")
Figure3_normal[[1]][,,1]
set.seed(0)## set seed for the entire simulation
model = c("normal","binary","poisson")
dimen = c(30,25)
rank = c(6,3)
################### simulation ##################
lglk_sum = list()
true_lglk_sum = list()
time_sum = list()
for (i in 1) {## three data types
lglk = list()
true_lglk = c()
time = c()
k = 1
for (j in 1:2) {## two possbiel dimensions
for (r in 1:2) {## two possible ranks
if(i==1) signal=3
else if(i==2) signal=10
else if(i==3) signal=6
my_data = sim_data(seed = NA, rep(dimen[j],3), rep(rank[r],3), p = rep(floor(0.4*dimen[j]) ,3),dist = model[i], dup = 1,signal = signal)
ptm = proc.time()
my_reg =  tensor_regress(tsr = my_data$tsr[[1]], X_covar1 = my_data$X_covar1, X_covar2 = my_data$X_covar2,X_covar3 = my_data$X_covar3,rep(rank[r],3), Nsim = 20, cons = "non",dist = model[i],traj_long=TRUE)
time1 = proc.time() - ptm
time[k] = time1[3] ## running time
true_lglk[k] = loglike(my_data$tsr[[1]], my_data$U,dist = model[i])
lglk[[k]] = my_reg$lglk
k = k+1
}
}
lglk_sum[[i]] = lglk
true_lglk_sum[[i]] = true_lglk
time_sum[[i]] = time
}
#### normal model with d = 30, r = 6,3
lglk_normal = c(lglk_sum[[1]][[1]] ,lglk_sum[[1]][[2]])
case_normal=  c(rep("d3r6",33), rep("d3r3",33))
iter = rep(1:33,times = 2)
olglk1 = true_lglk_sum[[1]][1]
olglk2 = true_lglk_sum[[1]][2]
plotdata = data.frame(lglk = lglk_normal,case = case_normal,iter = iter)
p1 = ggplot(data = plotdata, aes(x = iter,y = lglk/10000)) +
geom_line(aes(color = case),lwd = 1) +
geom_point(aes(shape = case),size = 2) +
scale_color_manual(values=c("#6F9B3C","#F2AB1D"),labels = c("d = 30, r = 3 (0.7 sec/iter)", "d = 30, r = 6 (4.1 sec/iter)")) +
scale_shape_manual(values = c(20,17),labels = c("d = 30, r = 3 (0.7 sec/iter)","d = 30, r = 6 (4.1 sec/iter)")) +
geom_hline(yintercept=olglk1/10000, color = "#F2AB1D" , lty = "dashed",lwd = 1)+
geom_hline(yintercept=olglk2/10000, color = "#6F9B3C",lty = "dashed",lwd = 1)+
guides( color = guide_legend(title = "Setting"), linetype = guide_legend("Setting"), shape = guide_legend("Setting"))+
labs(y = "log-likelihood x 10^4",x = "iteration",size = 16) +
theme(axis.text.y = element_text(size = 16 ) ,
axis.text.x = element_text(size = 16 ),
legend.text=element_text(size=16),
legend.title = element_text(size=16),
axis.title=element_text(size=16),
legend.position = "none")
p1
library(ggplot2)
lglk_normal = c(lglk_sum[[1]][[1]] ,lglk_sum[[1]][[2]])
case_normal=  c(rep("d3r6",33), rep("d3r3",33))
iter = rep(1:33,times = 2)
olglk1 = true_lglk_sum[[1]][1]
olglk2 = true_lglk_sum[[1]][2]
plotdata = data.frame(lglk = lglk_normal,case = case_normal,iter = iter)
p1 = ggplot(data = plotdata, aes(x = iter,y = lglk/10000)) +
geom_line(aes(color = case),lwd = 1) +
geom_point(aes(shape = case),size = 2) +
scale_color_manual(values=c("#6F9B3C","#F2AB1D"),labels = c("d = 30, r = 3 (0.7 sec/iter)", "d = 30, r = 6 (4.1 sec/iter)")) +
scale_shape_manual(values = c(20,17),labels = c("d = 30, r = 3 (0.7 sec/iter)","d = 30, r = 6 (4.1 sec/iter)")) +
geom_hline(yintercept=olglk1/10000, color = "#F2AB1D" , lty = "dashed",lwd = 1)+
geom_hline(yintercept=olglk2/10000, color = "#6F9B3C",lty = "dashed",lwd = 1)+
guides( color = guide_legend(title = "Setting"), linetype = guide_legend("Setting"), shape = guide_legend("Setting"))+
labs(y = "log-likelihood x 10^4",x = "iteration",size = 16) +
theme(axis.text.y = element_text(size = 16 ) ,
axis.text.x = element_text(size = 16 ),
legend.text=element_text(size=16),
legend.title = element_text(size=16),
axis.title=element_text(size=16),
legend.position = "none")
p1
remove.packages("tensorregress")
#### code for Figure 2. Log-likelihood trajectory for three models under different (d,r) combinations
install.packages("tensorregress.tar.gz",repos = NULL, type="source")
source("simulation.R")
library(tensorregress)
library(ggplot2)
set.seed(0)## set seed for the entire simulation
model = c("normal","binary","poisson")
dimen = c(30,25)
rank = c(6,3)
################### simulation ##################
lglk_sum = list()
true_lglk_sum = list()
time_sum = list()
for (i in 1) {## three data types
lglk = list()
true_lglk = c()
time = c()
k = 1
for (j in 1:2) {## two possbiel dimensions
for (r in 1:2) {## two possible ranks
if(i==1) signal=3
else if(i==2) signal=10
else if(i==3) signal=6
my_data = sim_data(seed = NA, rep(dimen[j],3), rep(rank[r],3), p = rep(floor(0.4*dimen[j]) ,3),dist = model[i], dup = 1,signal = signal)
ptm = proc.time()
my_reg =  tensor_regress(tsr = my_data$tsr[[1]], X_covar1 = my_data$X_covar1, X_covar2 = my_data$X_covar2,X_covar3 = my_data$X_covar3,rep(rank[r],3), Nsim = 20, cons = "non",dist = model[i],traj_long=TRUE)
time1 = proc.time() - ptm
time[k] = time1[3] ## running time
true_lglk[k] = loglike(my_data$tsr[[1]], my_data$U,dist = model[i])
lglk[[k]] = my_reg$lglk
k = k+1
}
}
lglk_sum[[i]] = lglk
true_lglk_sum[[i]] = true_lglk
time_sum[[i]] = time
}
#### normal model with d = 30, r = 6,3
lglk_normal = c(lglk_sum[[1]][[1]] ,lglk_sum[[1]][[2]])
case_normal=  c(rep("d3r6",33), rep("d3r3",33))
iter = rep(1:33,times = 2)
olglk1 = true_lglk_sum[[1]][1]
olglk2 = true_lglk_sum[[1]][2]
plotdata = data.frame(lglk = lglk_normal,case = case_normal,iter = iter)
p1 = ggplot(data = plotdata, aes(x = iter,y = lglk/10000)) +
geom_line(aes(color = case),lwd = 1) +
geom_point(aes(shape = case),size = 2) +
scale_color_manual(values=c("#6F9B3C","#F2AB1D"),labels = c("d = 30, r = 3 (0.7 sec/iter)", "d = 30, r = 6 (4.1 sec/iter)")) +
scale_shape_manual(values = c(20,17),labels = c("d = 30, r = 3 (0.7 sec/iter)","d = 30, r = 6 (4.1 sec/iter)")) +
geom_hline(yintercept=olglk1/10000, color = "#F2AB1D" , lty = "dashed",lwd = 1)+
geom_hline(yintercept=olglk2/10000, color = "#6F9B3C",lty = "dashed",lwd = 1)+
guides( color = guide_legend(title = "Setting"), linetype = guide_legend("Setting"), shape = guide_legend("Setting"))+
labs(y = "log-likelihood x 10^4",x = "iteration",size = 16) +
theme(axis.text.y = element_text(size = 16 ) ,
axis.text.x = element_text(size = 16 ),
legend.text=element_text(size=16),
legend.title = element_text(size=16),
axis.title=element_text(size=16),
legend.position = "none")
p1
remove.packages("tensorregress")
