# use new QR generalization
qr1 = qr(X_covar1); qr2 = qr(X_covar2); qr3 = qr(X_covar3)
Q1 = qr.Q(qr1); Q2 = qr.Q(qr2); Q3 = qr.Q(qr3)
R1 = qr.R(qr1); R2 = qr.R(qr2); R3 = qr.R(qr3)
new_y = ttl(tsr.transform, list_mat = list(t(Q1), t(Q2),t(Q3)), c(1,2,3)) # Y \times Q^T = B \times R
res_un = tucker(new_y,ranks = core_shape) # HOOI, not random
G = res_un$Z
W1 = solve(R1)%*%res_un$U[[1]]; W2 = solve(R2)%*%res_un$U[[2]]; W3 = solve(R3)%*%res_un$U[[3]]
if(alg == "unsup"){ # if use unsup, then return the values after pre-process
C_ts=ttl(G,list(W1,W2,W3),ms = c(1,2,3))
U = ttl(C_ts, list(X_covar1, X_covar2, X_covar3),c(1,2,3))
lglk = loglike(tsr@data,U@data,dist)
sigma_est=mean((tsr@data-U_to_mean(U@data,dist))^2)
violate = 0
return(list(W = list(W1 = W1,W2 = W2,W3 = W3),G = G@data,U=U@data, C_ts = C_ts@data,lglk = lglk, sigma=sigma_est,violate = violate))
}
}else if(initial == "tucker"){
C_ts=ttl(tsr.transform,list(ginv(X_covar1),ginv(X_covar2),ginv(X_covar3)),ms=c(1,2,3))
tckr = tucker(C_ts, ranks = core_shape)
W1 = tckr$U[[1]] ; W2 = tckr$U[[2]] ; W3 = tckr$U[[3]] ## tucker factors
G = tckr$Z
}
A = X_covar1%*%W1
B = X_covar2%*%W2
C = X_covar3%*%W3
core=update_core(tsr,G,A,B,C,core_shape,cons,lambda,alpha,solver,dist)
G=core$G
lglk=core$lglk
violate=core$violate
for(n in 1:Nsim){
## parameter from previous step
W10 = W1 ; W20 = W2 ; W30 = W3 ; G0=G; A0=A;B0=B;C0=C;lglk0=tail(lglk,1);
###### update W1
G_BC = ttl(G, list(B,C), ms = c(2,3))
G_BC1 = unfold(G_BC, row_idx = 1, col_idx = c(2,3))@data
if(un_m1) {re = glm_mat(t(Y_1),t(G_BC1),dist=dist) ## no covariate
} else {re = glm_two(Y = Y_1, X1 = X_covar1, X2 = G_BC1, dist=dist)}
if(dim(re[[1]])[1]==1) W1=t(re[[1]]) else W1 = as.matrix(re[[1]])
lglk = c(lglk,re[[2]])
## orthogonal W1*
qr_res=qr(W1)
W1=qr.Q(qr_res)
G=ttm(G,qr.R(qr_res),1)
#print("W1 Done------------------")
##### calculate A
A = X_covar1%*%W1;
##### update W2
G_AC = ttl(G, list(A,C), ms = c(1,3))
G_AC2 = unfold(G_AC, row_idx = 2, col_idx = c(1,3))@data
if(un_m2) {re = glm_mat(t(Y_2),t(G_AC2),dist=dist)
} else {re = glm_two(Y_2, X_covar2, G_AC2, dist=dist)}
if(dim(re[[1]])[1]==1) W2=t(re[[1]]) else W2 = as.matrix(re[[1]])
lglk = c(lglk,re[[2]])
## orthogonal W2*
qr_res=qr(W2)
W2=qr.Q(qr_res)
G=ttm(G,qr.R(qr_res),2)
#print("W2 Done------------------")
##### calculate B
B = X_covar2%*%W2;
###### update W3
G_AB = ttl(G, list(A,B), ms = c(1,2))
G_AB3 = unfold(G_AB, row_idx = 3, col_idx = c(1,2))@data
if(un_m3) {re = glm_mat(t(Y_3),t(G_AB3),dist=dist)
} else {re = glm_two(Y_3, X_covar3, G_AB3,dist=dist)}
if(dim(re[[1]])[1]==1) W3=t(re[[1]]) else W3 = as.matrix(re[[1]])
lglk = c(lglk,re[[2]])
## orthogonal W3*
qr_res=qr(W3)
W3=qr.Q(qr_res)
G=ttm(G,qr.R(qr_res),3)
#print("W3 Done------------------")
##### calculate C
C = X_covar3%*%W3;
#########-----------------------------------------------
###  obtain core tensor under constraint
core=update_core(tsr,G,A,B,C,core_shape,cons,lambda,alpha,solver,dist)
G=core$G
lglk=c(lglk,core$lglk)
violate=c(violate,core$violate)
#print("G Done------------------")
message(paste(n,"-th  iteration -- when dimension is",d1,d2,d3,"- rank is ",r1,r2,r3," -----------------"))
#print(paste(n,"-th  iteration"))
if((traj_long==T)&(n < 8)){
n = n+1
next
}
if ((tail(lglk,1)-lglk0)/abs(lglk0)<= 0.0001 & tail(lglk,1)>= lglk0 ){
message(paste(n,"-th iteration: convergence"))
break
} else if (tail(lglk,1)-lglk0 < 0) {
W1 = W10 ; W2 = W20 ; W3 = W30; G=G0; lglk=lglk[-c((length(lglk)-3):length(lglk))];
A=A0;B=B0;C=C0;
break
}
}
U=ttl(G,list(A,B,C),ms = c(1,2,3))@data
sigma_est=mean((tsr@data-U_to_mean(U,dist))^2)
return(list(W = list(W1 = W1,W2 = W2,W3 = W3),G = G@data,U=U, C_ts=ttl(G,list(W1,W2,W3),ms = c(1,2,3))@data,lglk = lglk, sigma=sigma_est,violate = violate))
}
ptm = proc.time()
res1 = tensor_regress1(data$tsr[[n]],X_covar3 = data$X_covar3,
core_shape=core_shape,Nsim=10, cons = 'non', dist = dist,
initial = "de_tucker", alg = "alter")
ptime = proc.time() - ptm
times1[i,j,n] = ptime[2]
err1[i,j,n] = mean((res1$U - data$U)^2)
cor1[i,j,n] = cor(as.vector(res1$U), as.vector(data$U))
mean((res1$U - data$U)^2)
mean((res$U - data$U)^2)
cor(as.vector(res1$U), as.vector(data$U))
ptm = proc.time()
res2 = tensor_regress1(data$tsr[[n]],X_covar3 = data$X_covar3,
core_shape=core_shape,Nsim=10, cons = 'non', dist = dist,
initial = "de_tucker", alg = "unsup")
ptime = proc.time() - ptm
mean((res2$U - data$U)^2)
cor(as.vector(res2$U), as.vector(data$U))
ptm = proc.time()
res3 = tensor_regress1(data$tsr[[n]],X_covar3 = data$X_covar3,
core_shape=core_shape,Nsim=10, cons = 'non', dist = dist,
initial = "tucker", alg = "unsup")
ptime = proc.time() - ptm
ptime[2]
ptime[2]
mean((res3$U - data$U)^2)
cor(as.vector(res3$U), as.vector(data$U))
mean((res$U - data$U)^2)
set.seed(2311)
dup = 10; d=20; whole_shape = rep(d,3); dist = "normal"
r_range = rbind(c(3,3,3), c(4,5,6))
signal_range = c(3,6)
err0 = err1 = err2 = err3 = array(0,dim = c(2,2,dup)) # signal, rank, metric, dup. metric: mse, 1 - cor, time
final_err = final_sd_err = array(0, dim = c(2,2,4)) # signal, rank, method
cor0 = cor1 = cor2 = cor_3 = array(0,dim = c(2,2,dup)) # signal, rank, metric, dup. metric: mse, 1 - cor, time
final_cor = final_sd_cor = array(0, dim = c(2,2,4)) # signal, rank, method
times0 = times1 = times2 =times3 = array(0,dim = c(2,2,dup)) # signal, rank, metric, dup. metric: mse, 1 - cor, time
final_time = final_sd_time = array(0, dim = c(2,2,4)) # signal, rank, method
for (i in 1:2) {  # signal
for (j in 1:2) {  # rank
for (n in 1:dup) {
i  = 2; j = 2; n = 3
signal = signal_range[i]
core_shape = r_range[j,]
cat("signal = ",signal, ", rank = ", core_shape,", dup = ", n,"\n" )
data=sim_data(whole_shape = whole_shape, core_shape=core_shape,p=c(0,0,0.4*d),dist=dist, dup=dup, signal=signal)
ptm = proc.time()
res = tensor_regress(data$tsr[[n]],X_covar3 = data$X_covar3,
core_shape=core_shape,Nsim=10, cons = 'non', dist = dist)### tensor_regress
ptime = proc.time() - ptm
times0[i,j,n] = ptime[2]
err0[i,j,n] = mean((res$U - data$U)^2)
cor0[i,j,n] = cor(as.vector(res$U), as.vector(data$U))
ptm = proc.time()
res1 = tensor_regress1(data$tsr[[n]],X_covar3 = data$X_covar3,
core_shape=core_shape,Nsim=10, cons = 'non', dist = dist,
initial = "de_tucker", alg = "alter")
ptime = proc.time() - ptm
times1[i,j,n] = ptime[2]
err1[i,j,n] = mean((res1$U - data$U)^2)
cor1[i,j,n] = cor(as.vector(res1$U), as.vector(data$U))
ptm = proc.time()
res2 = tensor_regress1(data$tsr[[n]],X_covar3 = data$X_covar3,
core_shape=core_shape,Nsim=10, cons = 'non', dist = dist,
initial = "de_tucker", alg = "unsup")
ptime = proc.time() - ptm
times2[i,j,n] = ptime[2]
err2[i,j,n] = mean((res2$U - data$U)^2)
cor2[i,j,n] = cor(as.vector(res2$U), as.vector(data$U))
ptm = proc.time()
res3 = tensor_regress1(data$tsr[[n]],X_covar3 = data$X_covar3,
core_shape=core_shape,Nsim=10, cons = 'non', dist = dist,
initial = "tucker", alg = "unsup")
ptime = proc.time() - ptm
times3[i,j,n] = ptime[2]
err3[i,j,n] = mean((res3$U - data$U)^2)
cor3[i,j,n] = cor(as.vector(res3$U), as.vector(data$U))
}
final_err[i,j,1] = mean(err0[i,j,]); final_err[i,j,2] = mean(err1[i,j,]); final_err[i,j,3] = mean(err2[i,j,]); final_err[i,j,4] = mean(err3[i,j,])
final_sd_err[i,j,1] = sd(err0[i,j,]); final_sd_err[i,j,2] = sd(err1[i,j,]); final_sd_err[i,j,3] = sd(err2[i,j,]); final_sd_err[i,j,4] = sd(err3[i,j,])
final_cor[i,j,1] = mean(cor0[i,j,]); final_cor[i,j,2] = mean(cor1[i,j,]); final_cor[i,j,3] = mean(cor2[i,j,]);final_cor[i,j,4] = mean(cor3[i,j,])
final_sd_cor[i,j,1] = sd(cor0[i,j,]); final_sd_cor[i,j,2] = sd(cor1[i,j,]); final_sd_cor[i,j,3] = sd(cor2[i,j,]); final_sd_cor[i,j,4] = sd(cor3[i,j,])
final_time[i,j,1] = mean(times0[i,j,]); final_time[i,j,2] = mean(times1[i,j,]); final_time[i,j,3] = mean(times2[i,j,]); final_time[i,j,4] = mean(times3[i,j,])
final_sd_time[i,j,1] = sd(times0[i,j,]); final_sd_time[i,j,2] = sd(times1[i,j,]); final_sd_time[i,j,3] = sd(times2[i,j,]); final_sd_time[i,j,4] = sd(times3[i,j,])
}
}
set.seed(2311)
dup = 10; d=20; whole_shape = rep(d,3); dist = "normal"
r_range = rbind(c(3,3,3), c(4,5,6))
signal_range = c(3,6)
err0 = err1 = err2 = err3 = array(0,dim = c(2,2,dup)) # signal, rank, metric, dup. metric: mse, 1 - cor, time
final_err = final_sd_err = array(0, dim = c(2,2,4)) # signal, rank, method
cor0 = cor1 = cor2 = cor3 = array(0,dim = c(2,2,dup)) # signal, rank, metric, dup. metric: mse, 1 - cor, time
final_cor = final_sd_cor = array(0, dim = c(2,2,4)) # signal, rank, method
times0 = times1 = times2 =times3 = array(0,dim = c(2,2,dup)) # signal, rank, metric, dup. metric: mse, 1 - cor, time
final_time = final_sd_time = array(0, dim = c(2,2,4)) # signal, rank, method
for (i in 1:2) {  # signal
for (j in 1:2) {  # rank
for (n in 1:dup) {
i  = 2; j = 2; n = 3
signal = signal_range[i]
core_shape = r_range[j,]
cat("signal = ",signal, ", rank = ", core_shape,", dup = ", n,"\n" )
data=sim_data(whole_shape = whole_shape, core_shape=core_shape,p=c(0,0,0.4*d),dist=dist, dup=dup, signal=signal)
ptm = proc.time()
res = tensor_regress(data$tsr[[n]],X_covar3 = data$X_covar3,
core_shape=core_shape,Nsim=10, cons = 'non', dist = dist)### tensor_regress
ptime = proc.time() - ptm
times0[i,j,n] = ptime[2]
err0[i,j,n] = mean((res$U - data$U)^2)
cor0[i,j,n] = cor(as.vector(res$U), as.vector(data$U))
ptm = proc.time()
res1 = tensor_regress1(data$tsr[[n]],X_covar3 = data$X_covar3,
core_shape=core_shape,Nsim=10, cons = 'non', dist = dist,
initial = "de_tucker", alg = "alter")
ptime = proc.time() - ptm
times1[i,j,n] = ptime[2]
err1[i,j,n] = mean((res1$U - data$U)^2)
cor1[i,j,n] = cor(as.vector(res1$U), as.vector(data$U))
ptm = proc.time()
res2 = tensor_regress1(data$tsr[[n]],X_covar3 = data$X_covar3,
core_shape=core_shape,Nsim=10, cons = 'non', dist = dist,
initial = "de_tucker", alg = "unsup")
ptime = proc.time() - ptm
times2[i,j,n] = ptime[2]
err2[i,j,n] = mean((res2$U - data$U)^2)
cor2[i,j,n] = cor(as.vector(res2$U), as.vector(data$U))
ptm = proc.time()
res3 = tensor_regress1(data$tsr[[n]],X_covar3 = data$X_covar3,
core_shape=core_shape,Nsim=10, cons = 'non', dist = dist,
initial = "tucker", alg = "unsup")
ptime = proc.time() - ptm
times3[i,j,n] = ptime[2]
err3[i,j,n] = mean((res3$U - data$U)^2)
cor3[i,j,n] = cor(as.vector(res3$U), as.vector(data$U))
}
final_err[i,j,1] = mean(err0[i,j,]); final_err[i,j,2] = mean(err1[i,j,]); final_err[i,j,3] = mean(err2[i,j,]); final_err[i,j,4] = mean(err3[i,j,])
final_sd_err[i,j,1] = sd(err0[i,j,]); final_sd_err[i,j,2] = sd(err1[i,j,]); final_sd_err[i,j,3] = sd(err2[i,j,]); final_sd_err[i,j,4] = sd(err3[i,j,])
final_cor[i,j,1] = mean(cor0[i,j,]); final_cor[i,j,2] = mean(cor1[i,j,]); final_cor[i,j,3] = mean(cor2[i,j,]);final_cor[i,j,4] = mean(cor3[i,j,])
final_sd_cor[i,j,1] = sd(cor0[i,j,]); final_sd_cor[i,j,2] = sd(cor1[i,j,]); final_sd_cor[i,j,3] = sd(cor2[i,j,]); final_sd_cor[i,j,4] = sd(cor3[i,j,])
final_time[i,j,1] = mean(times0[i,j,]); final_time[i,j,2] = mean(times1[i,j,]); final_time[i,j,3] = mean(times2[i,j,]); final_time[i,j,4] = mean(times3[i,j,])
final_sd_time[i,j,1] = sd(times0[i,j,]); final_sd_time[i,j,2] = sd(times1[i,j,]); final_sd_time[i,j,3] = sd(times2[i,j,]); final_sd_time[i,j,4] = sd(times3[i,j,])
}
}
new_color = c("#069AA0","#CCC591","#BCA455","#D6CFC4")
final = final_err
finalsd = final_sd_err
s=1;
data=data.frame(PMSE=c(final[s,1,],final[s,2,]),sd=c(finalsd[s,1,],finalsd[s,2,]),Method=rep(c('Origin',"de_Tucker","de_Tucker_un", "Tucker"),2),Category=c(rep("low",3),rep("high",3)))
data[,3]=factor(data[,3],levels=c('Origin',"de_Tucker","de_Tucker_un", "Tucker"))
p1=ggplot(data=data, aes(x=as.factor(Category),y=PMSE, fill=Method))+geom_bar(stat="identity", position=position_dodge())+geom_errorbar(aes(ymin=PMSE-sd, ymax=PMSE+sd), width=.2,position=position_dodge(.9))+labs(x="Rank",y="MSE")+coord_cartesian(ylim = c(0, 0.05)) +  labs(title = "Low Signal",size = 5) +theme(plot.title = element_text(hjust = 0.5,size = 11))+
scale_fill_manual(values=new_color)+theme(axis.text=element_text(size=12),axis.title=element_text(size=10))
p1
s=1;
data=data.frame(PMSE=c(final[s,1,],final[s,2,]),sd=c(finalsd[s,1,],finalsd[s,2,]),Method=rep(c('Origin',"de_Tucker","de_Tucker_un", "Tucker"),2),Category=c(rep("low",4),rep("high",4)))
data[,3]=factor(data[,3],levels=c('Origin',"de_Tucker","de_Tucker_un", "Tucker"))
p1=ggplot(data=data, aes(x=as.factor(Category),y=PMSE, fill=Method))+geom_bar(stat="identity", position=position_dodge())+geom_errorbar(aes(ymin=PMSE-sd, ymax=PMSE+sd), width=.2,position=position_dodge(.9))+labs(x="Rank",y="MSE")+coord_cartesian(ylim = c(0, 0.05)) +  labs(title = "Low Signal",size = 5) +theme(plot.title = element_text(hjust = 0.5,size = 11))+
scale_fill_manual(values=new_color)+theme(axis.text=element_text(size=12),axis.title=element_text(size=10))
p1
final = final_err
finalsd = final_sd_err
s=1;
data=data.frame(PMSE=c(final[s,1,],final[s,2,]),sd=c(finalsd[s,1,],finalsd[s,2,]),Method=rep(c('Origin',"de_Tucker","de_Tucker_un", "Tucker"),2),Category=c(rep("low",4),rep("high",4)))
data[,3]=factor(data[,3],levels=c('Origin',"de_Tucker","de_Tucker_un", "Tucker"))
p1=ggplot(data=data, aes(x=as.factor(Category),y=PMSE, fill=Method))+geom_bar(stat="identity", position=position_dodge())+geom_errorbar(aes(ymin=PMSE-sd, ymax=PMSE+sd), width=.2,position=position_dodge(.9))+labs(x="Rank",y="MSE")+coord_cartesian(ylim = c(0, 0.05)) +  labs(title = "Low Signal",size = 5) +theme(plot.title = element_text(hjust = 0.5,size = 11))+
scale_fill_manual(values=new_color)+theme(axis.text=element_text(size=12),axis.title=element_text(size=10))
p1
final
final_err
### data
set.seed(2311)
dup = 10; d=20; whole_shape = rep(d,3); dist = "normal"
r_range = rbind(c(3,3,3), c(4,5,6))
signal_range = c(3,6)
err0 = err1 = err2 = err3 = array(0,dim = c(2,2,dup)) # signal, rank, metric, dup. metric: mse, 1 - cor, time
final_err = final_sd_err = array(0, dim = c(2,2,4)) # signal, rank, method
cor0 = cor1 = cor2 = cor3 = array(0,dim = c(2,2,dup)) # signal, rank, metric, dup. metric: mse, 1 - cor, time
final_cor = final_sd_cor = array(0, dim = c(2,2,4)) # signal, rank, method
times0 = times1 = times2 =times3 = array(0,dim = c(2,2,dup)) # signal, rank, metric, dup. metric: mse, 1 - cor, time
final_time = final_sd_time = array(0, dim = c(2,2,4)) # signal, rank, method
for (i in 1:2) {  # signal
for (j in 1:2) {  # rank
for (n in 1:dup) {
#i  = 2; j = 2; n = 3
signal = signal_range[i]
core_shape = r_range[j,]
cat("signal = ",signal, ", rank = ", core_shape,", dup = ", n,"\n" )
data=sim_data(whole_shape = whole_shape, core_shape=core_shape,p=c(0,0,0.4*d),dist=dist, dup=dup, signal=signal)
ptm = proc.time()
res = tensor_regress(data$tsr[[n]],X_covar3 = data$X_covar3,
core_shape=core_shape,Nsim=10, cons = 'non', dist = dist)### tensor_regress
ptime = proc.time() - ptm
times0[i,j,n] = ptime[2]
err0[i,j,n] = mean((res$U - data$U)^2)
cor0[i,j,n] = cor(as.vector(res$U), as.vector(data$U))
ptm = proc.time()
res1 = tensor_regress1(data$tsr[[n]],X_covar3 = data$X_covar3,
core_shape=core_shape,Nsim=10, cons = 'non', dist = dist,
initial = "de_tucker", alg = "alter")
ptime = proc.time() - ptm
times1[i,j,n] = ptime[2]
err1[i,j,n] = mean((res1$U - data$U)^2)
cor1[i,j,n] = cor(as.vector(res1$U), as.vector(data$U))
ptm = proc.time()
res2 = tensor_regress1(data$tsr[[n]],X_covar3 = data$X_covar3,
core_shape=core_shape,Nsim=10, cons = 'non', dist = dist,
initial = "de_tucker", alg = "unsup")
ptime = proc.time() - ptm
times2[i,j,n] = ptime[2]
err2[i,j,n] = mean((res2$U - data$U)^2)
cor2[i,j,n] = cor(as.vector(res2$U), as.vector(data$U))
ptm = proc.time()
res3 = tensor_regress1(data$tsr[[n]],X_covar3 = data$X_covar3,
core_shape=core_shape,Nsim=10, cons = 'non', dist = dist,
initial = "tucker", alg = "unsup")
ptime = proc.time() - ptm
times3[i,j,n] = ptime[2]
err3[i,j,n] = mean((res3$U - data$U)^2)
cor3[i,j,n] = cor(as.vector(res3$U), as.vector(data$U))
}
final_err[i,j,1] = mean(err0[i,j,]); final_err[i,j,2] = mean(err1[i,j,]); final_err[i,j,3] = mean(err2[i,j,]); final_err[i,j,4] = mean(err3[i,j,])
final_sd_err[i,j,1] = sd(err0[i,j,]); final_sd_err[i,j,2] = sd(err1[i,j,]); final_sd_err[i,j,3] = sd(err2[i,j,]); final_sd_err[i,j,4] = sd(err3[i,j,])
final_cor[i,j,1] = mean(cor0[i,j,]); final_cor[i,j,2] = mean(cor1[i,j,]); final_cor[i,j,3] = mean(cor2[i,j,]);final_cor[i,j,4] = mean(cor3[i,j,])
final_sd_cor[i,j,1] = sd(cor0[i,j,]); final_sd_cor[i,j,2] = sd(cor1[i,j,]); final_sd_cor[i,j,3] = sd(cor2[i,j,]); final_sd_cor[i,j,4] = sd(cor3[i,j,])
final_time[i,j,1] = mean(times0[i,j,]); final_time[i,j,2] = mean(times1[i,j,]); final_time[i,j,3] = mean(times2[i,j,]); final_time[i,j,4] = mean(times3[i,j,])
final_sd_time[i,j,1] = sd(times0[i,j,]); final_sd_time[i,j,2] = sd(times1[i,j,]); final_sd_time[i,j,3] = sd(times2[i,j,]); final_sd_time[i,j,4] = sd(times3[i,j,])
}
}
new_color = c("#069AA0","#CCC591","#BCA455","#D6CFC4")
#### rank vs mse
final = final_err
finalsd = final_sd_err
s=1;
data=data.frame(PMSE=c(final[s,1,],final[s,2,]),sd=c(finalsd[s,1,],finalsd[s,2,]),Method=rep(c('Origin',"de_Tucker","de_Tucker_un", "Tucker"),2),Category=c(rep("low",4),rep("high",4)))
data[,3]=factor(data[,3],levels=c('Origin',"de_Tucker","de_Tucker_un", "Tucker"))
p1=ggplot(data=data, aes(x=as.factor(Category),y=PMSE, fill=Method))+geom_bar(stat="identity", position=position_dodge())+geom_errorbar(aes(ymin=PMSE-sd, ymax=PMSE+sd), width=.2,position=position_dodge(.9))+labs(x="Rank",y="MSE")+coord_cartesian(ylim = c(0, 0.05)) +  labs(title = "Low Signal",size = 5) +theme(plot.title = element_text(hjust = 0.5,size = 11))+
scale_fill_manual(values=new_color)+theme(axis.text=element_text(size=12),axis.title=element_text(size=10))
p1
s=2;
data=data.frame(PMSE=c(final[s,1,],final[s,2,]),sd=c(finalsd[s,1,],finalsd[s,2,]),Method=rep(c('Origin',"Tucker","Unsup"),2),Category=c(rep("low",3),rep("high",3)))
data[,3]=factor(data[,3],levels=c('Origin',"Tucker","Unsup"))
p2=ggplot(data=data, aes(x=as.factor(Category),y=PMSE, fill=Method))+geom_bar(stat="identity", position=position_dodge())+geom_errorbar(aes(ymin=PMSE-sd, ymax=PMSE+sd), width=.2,position=position_dodge(.9))+labs(x="Rank",y="MSE")+coord_cartesian(ylim = c(0, 0.05)) +  labs(title = "High Signal",size = 5) +theme(plot.title = element_text(hjust = 0.5,size = 11))+
scale_fill_manual(values=new_color)+theme(axis.text=element_text(size=12),axis.title=element_text(size=10))
p2
s=2;
data=data.frame(PMSE=c(final[s,1,],final[s,2,]),sd=c(finalsd[s,1,],finalsd[s,2,]),Method=rep(c('Origin',"de_Tucker","de_Tucker_un", "Tucker"),2),Category=c(rep("low",4),rep("high",4)))
data[,3]=factor(data[,3],levels=c('Origin',"de_Tucker","de_Tucker_un", "Tucker"))
p2=ggplot(data=data, aes(x=as.factor(Category),y=PMSE, fill=Method))+geom_bar(stat="identity", position=position_dodge())+geom_errorbar(aes(ymin=PMSE-sd, ymax=PMSE+sd), width=.2,position=position_dodge(.9))+labs(x="Rank",y="MSE")+coord_cartesian(ylim = c(0, 0.05)) +  labs(title = "High Signal",size = 5) +theme(plot.title = element_text(hjust = 0.5,size = 11))+
scale_fill_manual(values=new_color)+theme(axis.text=element_text(size=12),axis.title=element_text(size=10))
p2
set.seed(0054)
dup = 10; d=20; whole_shape = rep(d,3); dist = "normal"
r_range = rbind(c(3,3,3), c(4,5,6))
signal_range = c(3,6)
err0 = err1 = err2 = err3 = array(0,dim = c(2,2,dup)) # signal, rank, metric, dup. metric: mse, 1 - cor, time
final_err = final_sd_err = array(0, dim = c(2,2,4)) # signal, rank, method
cor0 = cor1 = cor2 = cor3 = array(0,dim = c(2,2,dup)) # signal, rank, metric, dup. metric: mse, 1 - cor, time
final_cor = final_sd_cor = array(0, dim = c(2,2,4)) # signal, rank, method
times0 = times1 = times2 =times3 = array(0,dim = c(2,2,dup)) # signal, rank, metric, dup. metric: mse, 1 - cor, time
final_time = final_sd_time = array(0, dim = c(2,2,4)) # signal, rank, method
for (i in 1:2) {  # signal
for (j in 1:2) {  # rank
for (n in 1:dup) {
#i  = 2; j = 2; n = 3
signal = signal_range[i]
core_shape = r_range[j,]
cat("signal = ",signal, ", rank = ", core_shape,", dup = ", n,"\n" )
data=sim_data(whole_shape = whole_shape, core_shape=core_shape,p=c(0,0,0.4*d),dist=dist, dup=dup, signal=signal)
ptm = proc.time()
res = tensor_regress(data$tsr[[n]],X_covar3 = data$X_covar3,
core_shape=core_shape,Nsim=10, cons = 'non', dist = dist)### tensor_regress
ptime = proc.time() - ptm
times0[i,j,n] = ptime[2]
err0[i,j,n] = mean((res$U - data$U)^2)
cor0[i,j,n] = cor(as.vector(res$U), as.vector(data$U))
ptm = proc.time()
res1 = tensor_regress1(data$tsr[[n]],X_covar3 = data$X_covar3,
core_shape=core_shape,Nsim=10, cons = 'non', dist = dist,
initial = "de_tucker", alg = "alter")
ptime = proc.time() - ptm
times1[i,j,n] = ptime[2]
err1[i,j,n] = mean((res1$U - data$U)^2)
cor1[i,j,n] = cor(as.vector(res1$U), as.vector(data$U))
ptm = proc.time()
res2 = tensor_regress1(data$tsr[[n]],X_covar3 = data$X_covar3,
core_shape=core_shape,Nsim=10, cons = 'non', dist = dist,
initial = "de_tucker", alg = "unsup")
ptime = proc.time() - ptm
times2[i,j,n] = ptime[2]
err2[i,j,n] = mean((res2$U - data$U)^2)
cor2[i,j,n] = cor(as.vector(res2$U), as.vector(data$U))
ptm = proc.time()
res3 = tensor_regress1(data$tsr[[n]],X_covar3 = data$X_covar3,
core_shape=core_shape,Nsim=10, cons = 'non', dist = dist,
initial = "tucker", alg = "unsup")
ptime = proc.time() - ptm
times3[i,j,n] = ptime[2]
err3[i,j,n] = mean((res3$U - data$U)^2)
cor3[i,j,n] = cor(as.vector(res3$U), as.vector(data$U))
}
final_err[i,j,1] = mean(err0[i,j,]); final_err[i,j,2] = mean(err1[i,j,]); final_err[i,j,3] = mean(err2[i,j,]); final_err[i,j,4] = mean(err3[i,j,])
final_sd_err[i,j,1] = sd(err0[i,j,]); final_sd_err[i,j,2] = sd(err1[i,j,]); final_sd_err[i,j,3] = sd(err2[i,j,]); final_sd_err[i,j,4] = sd(err3[i,j,])
final_cor[i,j,1] = mean(cor0[i,j,]); final_cor[i,j,2] = mean(cor1[i,j,]); final_cor[i,j,3] = mean(cor2[i,j,]);final_cor[i,j,4] = mean(cor3[i,j,])
final_sd_cor[i,j,1] = sd(cor0[i,j,]); final_sd_cor[i,j,2] = sd(cor1[i,j,]); final_sd_cor[i,j,3] = sd(cor2[i,j,]); final_sd_cor[i,j,4] = sd(cor3[i,j,])
final_time[i,j,1] = mean(times0[i,j,]); final_time[i,j,2] = mean(times1[i,j,]); final_time[i,j,3] = mean(times2[i,j,]); final_time[i,j,4] = mean(times3[i,j,])
final_sd_time[i,j,1] = sd(times0[i,j,]); final_sd_time[i,j,2] = sd(times1[i,j,]); final_sd_time[i,j,3] = sd(times2[i,j,]); final_sd_time[i,j,4] = sd(times3[i,j,])
}
}
new_color = c("#069AA0","#CCC591","#BCA455","#D6CFC4")
#### rank vs mse
final = final_err
finalsd = final_sd_err
s=1;
data=data.frame(PMSE=c(final[s,1,],final[s,2,]),sd=c(finalsd[s,1,],finalsd[s,2,]),Method=rep(c('Origin',"de_Tucker","de_Tucker_un", "Tucker"),2),Category=c(rep("low",4),rep("high",4)))
data[,3]=factor(data[,3],levels=c('Origin',"de_Tucker","de_Tucker_un", "Tucker"))
p1=ggplot(data=data, aes(x=as.factor(Category),y=PMSE, fill=Method))+geom_bar(stat="identity", position=position_dodge())+geom_errorbar(aes(ymin=PMSE-sd, ymax=PMSE+sd), width=.2,position=position_dodge(.9))+labs(x="Rank",y="MSE")+coord_cartesian(ylim = c(0, 0.05)) +  labs(title = "Low Signal",size = 5) +theme(plot.title = element_text(hjust = 0.5,size = 11))+
scale_fill_manual(values=new_color)+theme(axis.text=element_text(size=12),axis.title=element_text(size=10))
p1
s=2;
data=data.frame(PMSE=c(final[s,1,],final[s,2,]),sd=c(finalsd[s,1,],finalsd[s,2,]),Method=rep(c('Origin',"de_Tucker","de_Tucker_un", "Tucker"),2),Category=c(rep("low",4),rep("high",4)))
data[,3]=factor(data[,3],levels=c('Origin',"de_Tucker","de_Tucker_un", "Tucker"))
p2=ggplot(data=data, aes(x=as.factor(Category),y=PMSE, fill=Method))+geom_bar(stat="identity", position=position_dodge())+geom_errorbar(aes(ymin=PMSE-sd, ymax=PMSE+sd), width=.2,position=position_dodge(.9))+labs(x="Rank",y="MSE")+coord_cartesian(ylim = c(0, 0.05)) +  labs(title = "High Signal",size = 5) +theme(plot.title = element_text(hjust = 0.5,size = 11))+
scale_fill_manual(values=new_color)+theme(axis.text=element_text(size=12),axis.title=element_text(size=10))
p2
final_err[2,,]
s=1;
data=data.frame(PMSE=c(final[s,1,],final[s,2,]),sd=c(finalsd[s,1,],finalsd[s,2,]),Method=rep(c('Origin',"de_Tucker","de_Tucker_un", "Tucker"),2),Category=c(rep("low",4),rep("high",4)))
data[,3]=factor(data[,3],levels=c('Origin',"de_Tucker","de_Tucker_un", "Tucker"))
p1=ggplot(data=data, aes(x=as.factor(Category),y=PMSE, fill=Method))+geom_bar(stat="identity", position=position_dodge())+geom_errorbar(aes(ymin=PMSE-sd, ymax=PMSE+sd), width=.2,position=position_dodge(.9))+labs(x="Rank",y="MSE")+coord_cartesian(ylim = c(0, 0.06)) +  labs(title = "Low Signal",size = 5) +theme(plot.title = element_text(hjust = 0.5,size = 11))+
scale_fill_manual(values=new_color)+theme(axis.text=element_text(size=12),axis.title=element_text(size=10))
p1
s=2;
data=data.frame(PMSE=c(final[s,1,],final[s,2,]),sd=c(finalsd[s,1,],finalsd[s,2,]),Method=rep(c('Origin',"de_Tucker","de_Tucker_un", "Tucker"),2),Category=c(rep("low",4),rep("high",4)))
data[,3]=factor(data[,3],levels=c('Origin',"de_Tucker","de_Tucker_un", "Tucker"))
p2=ggplot(data=data, aes(x=as.factor(Category),y=PMSE, fill=Method))+geom_bar(stat="identity", position=position_dodge())+geom_errorbar(aes(ymin=PMSE-sd, ymax=PMSE+sd), width=.2,position=position_dodge(.9))+labs(x="Rank",y="MSE")+coord_cartesian(ylim = c(0, 0.06)) +  labs(title = "High Signal",size = 5) +theme(plot.title = element_text(hjust = 0.5,size = 11))+
scale_fill_manual(values=new_color)+theme(axis.text=element_text(size=12),axis.title=element_text(size=10))
p2
pdf("newpack_err.pdf",height = 3, width = 8)
(p1|p2)
dev.off()
final = 1- final_cor
finalsd = final_sd_cor
s=1;
data=data.frame(PMSE=c(final[s,1,],final[s,2,]),sd=c(finalsd[s,1,],finalsd[s,2,]),Method=rep(c('Origin',"Tucker","Unsup"),2),Category=c(rep("low",3),rep("high",3)))
data[,3]=factor(data[,3],levels=c('Origin',"Tucker","Unsup"))
p1=ggplot(data=data, aes(x=as.factor(Category),y=PMSE, fill=Method))+geom_bar(stat="identity", position=position_dodge())+geom_errorbar(aes(ymin=PMSE-sd, ymax=PMSE+sd), width=.2,position=position_dodge(.9))+labs(x="Rank",y="1 - Correlation")+coord_cartesian(ylim = c(0, 0.3)) +  labs(title = "Low Signal",size = 5) +theme(plot.title = element_text(hjust = 0.5,size = 11))+
scale_fill_manual(values=new_color)+theme(axis.text=element_text(size=12),axis.title=element_text(size=10))
p1
final = 1- final_cor
finalsd = final_sd_cor
s=1;
data=data.frame(PMSE=c(final[s,1,],final[s,2,]),sd=c(finalsd[s,1,],finalsd[s,2,]),Method=rep(c('Origin',"de_Tucker","de_Tucker_un", "Tucker"),2),Category=c(rep("low",4),rep("high",4)))
data[,3]=factor(data[,3],levels=c('Origin',"de_Tucker","de_Tucker_un", "Tucker"))
p1=ggplot(data=data, aes(x=as.factor(Category),y=PMSE, fill=Method))+geom_bar(stat="identity", position=position_dodge())+geom_errorbar(aes(ymin=PMSE-sd, ymax=PMSE+sd), width=.2,position=position_dodge(.9))+labs(x="Rank",y="1 - Correlation")+coord_cartesian(ylim = c(0, 0.3)) +  labs(title = "Low Signal",size = 5) +theme(plot.title = element_text(hjust = 0.5,size = 11))+
scale_fill_manual(values=new_color)+theme(axis.text=element_text(size=12),axis.title=element_text(size=10))
p1
s=2;
data=data.frame(PMSE=c(final[s,1,],final[s,2,]),sd=c(finalsd[s,1,],finalsd[s,2,]),Method=rep(c('Origin',"de_Tucker","de_Tucker_un", "Tucker"),2),Category=c(rep("low",4),rep("high",4)))
data[,3]=factor(data[,3],levels=c('Origin',"de_Tucker","de_Tucker_un", "Tucker"))
p2=ggplot(data=data, aes(x=as.factor(Category),y=PMSE, fill=Method))+geom_bar(stat="identity", position=position_dodge())+geom_errorbar(aes(ymin=PMSE-sd, ymax=PMSE+sd), width=.2,position=position_dodge(.9))+labs(x="Rank",y="1 - Correlation")+coord_cartesian(ylim = c(0, 0.1)) +  labs(title = "High Signal",size = 5) +theme(plot.title = element_text(hjust = 0.5,size = 11))+
scale_fill_manual(values=new_color)+theme(axis.text=element_text(size=12),axis.title=element_text(size=10))
p2
pdf("newpack_cor.pdf",height = 3, width = 8)
(p1|p2)
dev.off()
s=1;
data=data.frame(PMSE=c(final[s,1,],final[s,2,]),sd=c(finalsd[s,1,],finalsd[s,2,]),Method=rep(c('Origin',"de_Tucker","de_Tucker_un", "Tucker"),2),Category=c(rep("low",4),rep("high",4)))
data[,3]=factor(data[,3],levels=c('Origin',"de_Tucker","de_Tucker_un", "Tucker"))
p1=ggplot(data=data, aes(x=as.factor(Category),y=PMSE, fill=Method))+geom_bar(stat="identity", position=position_dodge())+geom_errorbar(aes(ymin=PMSE-sd, ymax=PMSE+sd), width=.2,position=position_dodge(.9))+labs(x="Rank",y="time")+coord_cartesian(ylim = c(0, 0.35)) +  labs(title = "Low Signal",size = 5) +theme(plot.title = element_text(hjust = 0.5,size = 11))+
scale_fill_manual(values=new_color)+theme(axis.text=element_text(size=12),axis.title=element_text(size=10))
p1
final = final_time
finalsd = final_sd_time
s=1;
data=data.frame(PMSE=c(final[s,1,],final[s,2,]),sd=c(finalsd[s,1,],finalsd[s,2,]),Method=rep(c('Origin',"de_Tucker","de_Tucker_un", "Tucker"),2),Category=c(rep("low",4),rep("high",4)))
data[,3]=factor(data[,3],levels=c('Origin',"de_Tucker","de_Tucker_un", "Tucker"))
p1=ggplot(data=data, aes(x=as.factor(Category),y=PMSE, fill=Method))+geom_bar(stat="identity", position=position_dodge())+geom_errorbar(aes(ymin=PMSE-sd, ymax=PMSE+sd), width=.2,position=position_dodge(.9))+labs(x="Rank",y="time")+coord_cartesian(ylim = c(0, 0.35)) +  labs(title = "Low Signal",size = 5) +theme(plot.title = element_text(hjust = 0.5,size = 11))+
scale_fill_manual(values=new_color)+theme(axis.text=element_text(size=12),axis.title=element_text(size=10))
p1
s=2;
data=data.frame(PMSE=c(final[s,1,],final[s,2,]),sd=c(finalsd[s,1,],finalsd[s,2,]),Method=rep(c('Origin',"Tucker","Unsup"),2),Category=c(rep("low",3),rep("high",3)))
data[,3]=factor(data[,3],levels=c('Origin',"Tucker","Unsup"))
p2=ggplot(data=data, aes(x=as.factor(Category),y=PMSE, fill=Method))+geom_bar(stat="identity", position=position_dodge())+geom_errorbar(aes(ymin=PMSE-sd, ymax=PMSE+sd), width=.2,position=position_dodge(.9))+labs(x="Rank",y="time")+coord_cartesian(ylim = c(0, 0.35)) +  labs(title = "High Signal",size = 5) +theme(plot.title = element_text(hjust = 0.5,size = 11))+
scale_fill_manual(values=new_color)+theme(axis.text=element_text(size=12),axis.title=element_text(size=10))
p2
s=2;
data=data.frame(PMSE=c(final[s,1,],final[s,2,]),sd=c(finalsd[s,1,],finalsd[s,2,]),Method=rep(c('Origin',"de_Tucker","de_Tucker_un", "Tucker"),2),Category=c(rep("low",4),rep("high",4)))
data[,3]=factor(data[,3],levels=c('Origin',"de_Tucker","de_Tucker_un", "Tucker"))
p2=ggplot(data=data, aes(x=as.factor(Category),y=PMSE, fill=Method))+geom_bar(stat="identity", position=position_dodge())+geom_errorbar(aes(ymin=PMSE-sd, ymax=PMSE+sd), width=.2,position=position_dodge(.9))+labs(x="Rank",y="time")+coord_cartesian(ylim = c(0, 0.35)) +  labs(title = "High Signal",size = 5) +theme(plot.title = element_text(hjust = 0.5,size = 11))+
scale_fill_manual(values=new_color)+theme(axis.text=element_text(size=12),axis.title=element_text(size=10))
p2
s=1;
data=data.frame(PMSE=c(final[s,1,],final[s,2,]),sd=c(finalsd[s,1,],finalsd[s,2,]),Method=rep(c('Origin',"de_Tucker","de_Tucker_un", "Tucker"),2),Category=c(rep("low",4),rep("high",4)))
data[,3]=factor(data[,3],levels=c('Origin',"de_Tucker","de_Tucker_un", "Tucker"))
p1=ggplot(data=data, aes(x=as.factor(Category),y=PMSE, fill=Method))+geom_bar(stat="identity", position=position_dodge())+geom_errorbar(aes(ymin=PMSE-sd, ymax=PMSE+sd), width=.2,position=position_dodge(.9))+labs(x="Rank",y="time")+coord_cartesian(ylim = c(0, 0.35)) +  labs(title = "Low Signal",size = 5) +theme(plot.title = element_text(hjust = 0.5,size = 11))+
scale_fill_manual(values=new_color)+theme(axis.text=element_text(size=12),axis.title=element_text(size=10))
p1
s=2;
data=data.frame(PMSE=c(final[s,1,],final[s,2,]),sd=c(finalsd[s,1,],finalsd[s,2,]),Method=rep(c('Origin',"de_Tucker","de_Tucker_un", "Tucker"),2),Category=c(rep("low",4),rep("high",4)))
data[,3]=factor(data[,3],levels=c('Origin',"de_Tucker","de_Tucker_un", "Tucker"))
p2=ggplot(data=data, aes(x=as.factor(Category),y=PMSE, fill=Method))+geom_bar(stat="identity", position=position_dodge())+geom_errorbar(aes(ymin=PMSE-sd, ymax=PMSE+sd), width=.2,position=position_dodge(.9))+labs(x="Rank",y="time")+coord_cartesian(ylim = c(0, 0.35)) +  labs(title = "High Signal",size = 5) +theme(plot.title = element_text(hjust = 0.5,size = 11))+
scale_fill_manual(values=new_color)+theme(axis.text=element_text(size=12),axis.title=element_text(size=10))
p2
s=1;
data=data.frame(PMSE=c(final[s,1,],final[s,2,]),sd=c(finalsd[s,1,],finalsd[s,2,]),Method=rep(c('Origin',"de_Tucker","de_Tucker_un", "Tucker"),2),Category=c(rep("low",4),rep("high",4)))
data[,3]=factor(data[,3],levels=c('Origin',"de_Tucker","de_Tucker_un", "Tucker"))
p1=ggplot(data=data, aes(x=as.factor(Category),y=PMSE, fill=Method))+geom_bar(stat="identity", position=position_dodge())+geom_errorbar(aes(ymin=PMSE-sd, ymax=PMSE+sd), width=.2,position=position_dodge(.9))+labs(x="Rank",y="time")+coord_cartesian(ylim = c(0, 0.4)) +  labs(title = "Low Signal",size = 5) +theme(plot.title = element_text(hjust = 0.5,size = 11))+
scale_fill_manual(values=new_color)+theme(axis.text=element_text(size=12),axis.title=element_text(size=10))
p1
pdf("newpack_time.pdf",height = 3, width = 8)
(p1|p2)
dev.off()
